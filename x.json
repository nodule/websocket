{
  "name": "websocket",
  "description": "Websocket components for ChiÏ‡",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/websocket.git"
  },
  "dependencies": {},
  "nodes": [
    {
      "dependencies": {
        "npm": {
          "websocket": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "url": {
            "type": "string",
            "title": "Url",
            "async": true
          },
          "protocol": {
            "title": "Protocol",
            "type": "string",
            "default": null
          },
          "send": {
            "title": "Send",
            "type": "any",
            "async": true
          }
        },
        "output": {
          "client": {
            "type": "WebSocket",
            "title": "WebSocket"
          },
          "open": {
            "type": "any",
            "title": "Open"
          },
          "close": {
            "type": "any",
            "title": "Close"
          },
          "message": {
            "type": "any",
            "title": "Message"
          },
          "error": {
            "type": "Object",
            "title": "Error"
          }
        }
      },
      "phrases": {
        "active": "Creating websocket client"
      },
      "async": true,
      "description": "Websocket Client",
      "ns": "websocket",
      "name": "client",
      "fn": "on.input.url = function(url) {\n\n  if(input.protocol) {\n    state.client = new websocket.w3cwebsocket(data, input.protocol);\n  } else {\n    state.client = new websocket.w3cwebsocket(data);\n  }\n\n  state.client.onmessage = function(event) {\n    output({ message: JSON.parse(event.data) });\n  };\n\n  state.client.onerror = function(event) {\n    output({ error: event });\n  };\n\n  state.client.onclose = function(event) {\n    output({ close: event });\n  };\n\n  state.client.onopen = function(event) {\n    output({\n      client: state.client,\n      open: event\n    });\n  };\n\n};\n\non.input.send = function() {\n\n  if(state.client && state.client.readyState === state.client.OPEN) {\n    state.client.send(JSON.stringify(data));\n  } else {\n    // should revoke input && re-queue\n    return false;\n  }\n};\n"
    }
  ],
  "twigs": []
}